#!/home/linuxbrew/.linuxbrew/bin/zsh

export PATH="/home/linuxbrew/.linuxbrew/bin:/usr/local/bin:/usr/bin:/bin:$PATH"

setopt null_glob
setopt err_exit
setopt pipe_fail

CONFIG_FILE="${HOME}/.git-autosync.cfg"
SCRIPT_PATH="${0:A}"
COMMAND_NAME="${0:t}"
LOG_FILE="${HOME}/.log/git_auto_sync.log"

typeset -A frequencies

show_help() {
    print "Usage: $COMMAND_NAME [OPTION]... COMMAND [ARGS]...

Manage automatic Git repository synchronization.

Commands:
  add REPO FREQ      Add a repository to a frequency
  remove REPO FREQ   Remove a repository from a frequency
  list [FREQ]        List repositories (for a specific frequency if provided)
  list -a, --all     List all repositories for all frequencies
  sync FREQ          Synchronize repositories for a frequency
  sync -a, --all     Synchronize repositories for all frequencies
  update-cron        Update cron jobs
  add-freq FREQ CRON Add a new frequency with cron expression
  remove-freq FREQ   Remove a frequency and its repositories

Options:
  -h, --help         Display this help message"
}

check_git_repo() {
    local dir="$1"
    local ret
    
    [[ "$dir" == "." ]] && dir="$PWD"
    
    if ! command -v git >/dev/null 2>&1; then
        echo "Error: git command not found. Please ensure git is installed and in PATH."
        return 1
    fi 
    
    if cd "$dir" 2>/dev/null; then
        if git rev-parse --git-dir >/dev/null 2>&1; then
            return 0
        fi
    fi
    
    return 1
}

check_config() {
    [[ -f "$CONFIG_FILE" ]] || {
        echo "Warning: Config file not found: $CONFIG_FILE"
        return 1
    }
}

create_config() {
    echo "Creating new config file: $CONFIG_FILE"
    cat << 'EOF' > "$CONFIG_FILE"
[nightly]
cron = "0 0 * * *"
paths = []

[weekly]
cron = "0 0 * * 0"
paths = []

[monthly]
cron = "0 0 1 * *"
paths = []
EOF
    echo "Created config file with premade nightly, weekly, and monthly frequencies."
}

load_config() {
    local current_freq=""
    local current_cron=""
    local current_paths=()
    
    while IFS= read -r line || [[ -n "$line" ]]; do
        # Trim whitespace
        line="${line#"${line%%[![:space:]]*}"}"
        line="${line%"${line##*[![:space:]]}"}"
        
        # Skip empty lines and comments
        [[ -z "$line" || "$line" == \#* ]] && continue
        
        case "$line" in
            \[*\])
                # Save previous frequency if exists
                if [[ -n "$current_freq" ]]; then
                    frequencies[$current_freq]="${current_cron}:${(j:,:)current_paths}"
                fi
                # Start new frequency
                current_freq="${line:1:-1}"
                current_cron=""
                current_paths=()
                ;;
            cron*=*)
                # Extract cron value, handling quoted strings
                current_cron="${line#*=}"
                current_cron="${current_cron#"${current_cron%%[! ]*}"}" # trim leading space
                current_cron="${current_cron#[\"\']}"  # remove leading quote
                current_cron="${current_cron%[\"\']}"  # remove trailing quote
                ;;
            paths*=*)
                # Extract paths array, handling quoted strings
                local paths_str="${line#*=}"
                paths_str="${paths_str#"${paths_str%%[! ]*}"}" # trim leading space
                paths_str="${paths_str#\[}"  # remove leading bracket
                paths_str="${paths_str%\]}"  # remove trailing bracket
                
                # Split paths string into array
                if [[ -n "$paths_str" ]]; then
                    # Convert comma-separated string to array, handling quoted values
                    local IFS=,
                    current_paths=()
                    for path in ${=paths_str}; do
                        # Trim whitespace and quotes
                        path="${path#"${path%%[! ]*}"}"
                        path="${path%"${path##*[! ]}"}"
                        path="${path#[\"\']}"
                        path="${path%[\"\']}"
                        [[ -n "$path" ]] && current_paths+=("$path")
                    done
                fi
                ;;
        esac
    done < "$CONFIG_FILE"
    
    # Save last frequency
    [[ -n "$current_freq" ]] && frequencies[$current_freq]="${current_cron}:${(j:,:)current_paths}"
}

save_config() {
    # Ensure config directory exists
    local config_dir="${CONFIG_FILE:h}"
    [[ -d "$config_dir" ]] || mkdir -p "$config_dir"
    
    # Create backup of existing config if it exists
    [[ -f "$CONFIG_FILE" ]] && cp "$CONFIG_FILE" "${CONFIG_FILE}.bak"
    
    # Clear/create the config file
    : > "$CONFIG_FILE" || {
        echo "Error: Could not write to config file: $CONFIG_FILE"
        return 1
    }
    
    # Write each frequency section
    local freq cron paths
    for freq in ${(k)frequencies}; do
        cron="${frequencies[$freq]%%:*}"
        paths=(${(s:,:)${frequencies[$freq]#*:}})
        
        {
            print -r -- "[$freq]"
            print -r -- "cron = \"$cron\""
            
            # Format paths array with proper quoting
            local quoted_paths=()
            local path
            for path in $paths; do
                quoted_paths+=("\"$path\"")
            done
            print -r -- "paths = [${(j:, :)quoted_paths}]"
            print
        } >> "$CONFIG_FILE"
    done
    
    echo "Configuration saved successfully."
}

# Rest of the functions remain the same
sync_repos() {
    local freq="$1"
    local repo
    echo "Syncing repositories for frequency: $freq"
    
    for repo in ${(s:,:)${frequencies[$freq]#*:}}; do
        echo "Syncing $repo"
        (
            if cd "$repo" 2>/dev/null; then
                if git rev-parse --git-dir >/dev/null 2>&1; then
                    local changes_exist=0
                    
                    # Check for changes
                    if ! git diff --quiet || ! git diff --staged --quiet; then
                        changes_exist=1
                    fi
                    
                    # Only commit if there are changes
                    if (( changes_exist )); then
                        git add .
                        git commit -m "chore: $freq sync"
                    fi
                    
                    # Pull and push regardless of local changes
                    git pull
                    git push
                else
                    echo "Error: $repo is no longer a git repository"
                fi
            else
                echo "Error: Could not access $repo"
            fi
        )
    done
}

add_repo() {
    local repo="$1" freq="$2"

    if [[ "$repo" == "." ]]; then
        echo "Checking current directory: $PWD"
        if ! check_git_repo "$PWD"; then
            echo "Error: Current directory is not a git repository."
            return 1
        fi
        repo="$PWD"
    else
        echo "Checking directory: $repo"
        if ! check_git_repo "$repo"; then
            echo "Error: $repo is not a git repository."
            return 1
        fi
    fi

    check_config || create_config
    load_config

    [[ -n "${frequencies[$freq]}" ]] || add_freq "$freq"

    local cron="${frequencies[$freq]%%:*}"
    local paths=(${(s:,:)${frequencies[$freq]#*:}})
    paths+=("$repo")
    frequencies[$freq]="${cron}:${(j:,:)paths}"

    save_config
    echo "Added $repo to $freq in the configuration."
    update_cron_for_freq "$freq"
}
remove_repo() {
    local repo="$1" freq="$2"

    if [[ "$repo" == "." ]]; then
        if ! git rev-parse --is-inside-work-tree &>/dev/null; then
            echo "Error: Current directory is not a git repository."
            return 1
        fi
        repo=$(git rev-parse --show-toplevel)
    fi

    if ! check_config; then
        echo "Error: Cannot remove repository. Config file not found."
        return 1
    fi
    
    load_config

    local cron="${frequencies[$freq]%%:*}"
    local paths=(${(s:,:)${frequencies[$freq]#*:}})
    paths=(${paths:#$repo})
    frequencies[$freq]="${cron}:${(j:,:)paths}"

    save_config
    echo "Removed $repo from $freq in the configuration."
    update_cron
}

list_repos() {
    local freq="$1"
    check_config || return 1
    load_config

    echo "Repositories for $freq:"
    print -l -- ${(s:,:)${frequencies[$freq]#*:}}
}

list_all_repos() {
    check_config || return 1
    load_config

    for freq in ${(k)frequencies}; do
        echo "Repositories for $freq:"
        # Use zsh's built-in printing with padding instead of sed
        print -l -- ${(s:,:)${frequencies[$freq]#*:}} | while read -r line; do
            print "  $line"
        done
        echo
    done
}

update_cron_for_freq() {
    local freq="$1"
    local temp_crontab
    
    # Save current crontab
    temp_crontab=$(crontab -l 2>/dev/null)
    
    # Remove existing entry for this frequency
    temp_crontab=$(echo "$temp_crontab" | grep -v "$SCRIPT_PATH sync $freq")
    
    # Write back modified crontab
    echo "$temp_crontab" | crontab -

    # Add new entry if we have a cron expression
    local cron_expression="${frequencies[$freq]%%:*}"
    if [[ -n "$cron_expression" ]]; then
        (echo "$temp_crontab"; echo "$cron_expression $SCRIPT_PATH sync $freq >> $LOG_FILE 2>&1") | crontab -
        echo "Updated cron job for $freq"
    fi
}

update_cron() {
    for freq in ${(k)frequencies}; do
        update_cron_for_freq "$freq"
    done
}

add_freq() {
    local freq="$1" cron_expression="$2"

    [[ -z "$cron_expression" ]] && {
        read -r "cron_expression?Enter cron expression for $freq (e.g., 0 0 * * * for daily at midnight): "
    }

    frequencies[$freq]="${cron_expression}:"
    save_config
    echo "Added new frequency: $freq with cron expression: $cron_expression"
    update_cron
}

remove_freq() {
    local freq="$1"

    check_config || {
        echo "Error: Cannot remove frequency. Config file not found."
        return 1
    }
    load_config

    [[ -n "${frequencies[$freq]}" ]] || {
        echo "Error: Frequency '$freq' not found in the configuration."
        return 1
    }

    unset "frequencies[$freq]"
    save_config

    echo "Removed frequency '$freq' and its associated repositories from the configuration."
    update_cron
}

# Main script
check_config || create_config
load_config

case "$1" in
    -h|--help)
        show_help
        exit 0
        ;;
    add)
        if [[ $# -lt 3 ]]; then
            print "Usage: $COMMAND_NAME add REPO FREQ"
            print "Use '$COMMAND_NAME --help' for more information."
            exit 1
        fi
        add_repo "$2" "$3"
        ;;
    remove)
        if [[ $# -lt 3 ]]; then
            print "Usage: $COMMAND_NAME remove REPO FREQ"
            print "Use '$COMMAND_NAME --help' for more information."
            exit 1
        fi
        remove_repo "$2" "$3"
        ;;
    list)
        case "$2" in
            "")
                print "Available frequencies:"
                print -l -- ${(k)frequencies}
                ;;
            -a|--all)
                list_all_repos
                ;;
            *)
                list_repos "$2"
                ;;
        esac
        ;;
    sync)
        case "$2" in
            "")
                print "Please specify a frequency to sync or use -a/--all to sync all frequencies."
                exit 1
                ;;
            -a|--all)
                for freq in ${(k)frequencies}; do
                    sync_repos "$freq"
                done
                ;;
            *)
                sync_repos "$2"
                ;;
        esac
        ;;
    update-cron)
        update_cron
        ;;
    add-freq)
        if [[ $# -lt 2 ]]; then
            print "Usage: $COMMAND_NAME add-freq FREQ [CRON]"
            print "Use '$COMMAND_NAME --help' for more information."
            exit 1
        fi
        add_freq "$2" "$3"
        ;;
    remove-freq)
        if [[ $# -lt 2 ]]; then
            print "Usage: $COMMAND_NAME remove-freq FREQ"
            print "Use '$COMMAND_NAME --help' for more information."
            exit 1
        fi
        remove_freq "$2"
        ;;
    *)
        print "Usage: $COMMAND_NAME {add|remove|list|sync|update-cron|add-freq|remove-freq} [repo] [freq]"
        print "Use '$COMMAND_NAME --help' for more information."
        exit 1
        ;;
esac
